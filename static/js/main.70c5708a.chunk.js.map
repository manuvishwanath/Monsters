{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.components.jsx","Components/Search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","myProp","monstersList","map","echMon","key","SearchBox","placeHolderText","onChangeHandel","type","placeholder","onChange","App","handelChange","cngEvnt","setState","searchField","target","value","state","Monsters","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAIaA,G,YAAO,SAACC,GACjB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,iBAA2DC,IAAK,+BACxE,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCDbC,G,MAAW,SAACC,GACrB,OAAO,yBAAKR,UAAU,aAAf,IACHQ,EAAOC,aAAaC,KAAI,SAAAC,GAAM,OAC1B,kBAAC,EAAD,CAAMC,IAAKD,EAAOR,GAAID,QAASS,UCN9BE,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,eAApB,OACrB,2BAAOC,KAAK,SAASC,YAAaH,EAAiBI,SAAUH,EAAgBf,UAAU,aCqC5EmB,E,kDApCb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAACC,GAAc,EAAKC,SAAS,CAAEC,YAAaF,EAAQG,OAAOC,SAXxE,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IALH,E,gEASO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEK,SAAUK,S,+BAInC,IAAD,EAC2BC,KAAKP,MAA/BC,EADD,EACCA,SAAUJ,EADX,EACWA,YACZW,EAAmBP,EAASQ,QAAO,SAAAjC,GAAO,OAC9CA,EAAQG,KAAK+B,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAKpC,UAAU,OACb,kDACA,kBAAC,EAAD,CACEc,gBAAgB,kBAChBC,eAAgBkB,KAAKb,eAGvB,kBAAC,EAAD,CAAUX,aAAcyB,S,GA9BdI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70c5708a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.component.css'\r\n\r\nexport const Card = (props) => {\r\n    return <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?size=100x100`} alt={\"monster {props.monster.id}\"} />\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from 'react'\r\n\r\nimport {Card} from '../card/card.component'\r\n\r\nimport './card-list.component.css';\r\n\r\n\r\nexport const CardList = (myProp) => {\r\n    return <div className='card-list'> {\r\n        myProp.monstersList.map(echMon => (\r\n            <Card key={echMon.id} monster={echMon}></Card>\r\n            // <h1 key={echMon.id}> {echMon.name} </h1>\r\n        ))\r\n    }</div>\r\n};","import React from 'react'\r\n\r\nimport './search-box.component.css'\r\n\r\nexport const SearchBox = ({ placeHolderText, onChangeHandel }) => (\r\n    <input type='search' placeholder={placeHolderText} onChange={onChangeHandel} className='search'\r\n    //{\r\n    // chngevent => {\r\n    //   this.setState({ searchField: chngevent.target.value }, () => console.log(this.state));\r\n    // }\r\n    //}\r\n    />\r\n)","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./Components/card-list/card-list.components\";\nimport { SearchBox } from \"./Components/Search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      Monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ Monsters: users }));\n  }\n  handelChange = (cngEvnt) => { this.setState({ searchField: cngEvnt.target.value }); };\n\n  render() {\n    const { Monsters, searchField } = this.state;\n    const filteredMonsters = Monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeHolderText=\"Search Monsters\"\n          onChangeHandel={this.handelChange}\n        />\n\n        <CardList monstersList={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}